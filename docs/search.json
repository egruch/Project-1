[
  {
    "objectID": "ST558_Project1.html",
    "href": "ST558_Project1.html",
    "title": "ST558 Project 1",
    "section": "",
    "text": "By Ella Gruchacz and Kevin Kronk"
  },
  {
    "objectID": "ST558_Project1.html#data",
    "href": "ST558_Project1.html#data",
    "title": "ST558 Project 1",
    "section": "Data",
    "text": "Data\nThe data we are working with is American Community Survey 1-Year Estimates Public Use Microdata Sample or PUMS Census data. This survey data is pseudo personal-level data that was collected from 2005-2019 and 2021-2023. This is publicly available data we can call at anytime. In this project we will not be working with all the variables collected from the survey. We will only call data from the years 2010 to 2022. The variables we will be calling in our functions are as follows:\n\nAGEP - Age\nGASP - Gas cost\nGRPIP - Gross rent\nJWAP - Time of arrival at work\nJWDP - Time of departure for work\nJWMNP - Travel time to work\nPWGTP - PUMS person weight (the number of observations (people) for a particular row)\nFER - Gave birth to child within the past 12 months\nHHL - Household language\nHISPEED - Broadband (high speed) Internet service such as cable, fiber optic, or DSL service\nJWTRNS - Means of transportation to work\nSCH - School enrollment\nSCHL - Educational attainment\nSEX - Sex\n\nFinally, we can specify the geography level of this data to be either state, region, division, or all. For each of the levels we can specify a subgroup to narrow down the data by that level."
  },
  {
    "objectID": "ST558_Project1.html#helper-function",
    "href": "ST558_Project1.html#helper-function",
    "title": "ST558 Project 1",
    "section": "Helper Function",
    "text": "Helper Function\nThe first custom function we created is a helper function that works with a given URL and outputs a tibble. This is a simple helper function because it takes the URL directly, does not build it for you, and outputs the data in the columns as is.\n\n# Helper function to take what is returned by GET() and turn it into a tibble\napi_tibble &lt;- function(my_url) {\n  GET_output &lt;- httr::GET(my_url)\n  census_parsed &lt;- jsonlite::fromJSON(rawToChar(GET_output$content)) #parse JSON content to character variables \n  \n  colnames(census_parsed) &lt;- census_parsed[1,] #finds column names and assigns them\n  census_parsed &lt;- census_parsed[-1,] #remove first row (column names)\n  census_tibble &lt;- as_tibble(census_parsed) #transform to tibble\n  class(census_tibble) &lt;- c(\"census\", class(census_tibble)) #make tibble a census class\n  return(census_tibble)\n}\n\n\n#An example of using the api_tibble function to query the API and make a tibble\nAPIurl &lt;- \"https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,JWAP,MAR&SCHL=24&for=state:09&key=51fa8d7040e7bff1dae932352f6b998a4678a557\"\n\napi_tibble(APIurl)\n\n# A tibble: 600 × 6\n   SEX   PWGTP JWAP  MAR   SCHL  state\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 1     16    0     5     24    09   \n 2 2     42    102   1     24    09   \n 3 1     44    0     1     24    09   \n 4 1     44    112   5     24    09   \n 5 2     37    83    1     24    09   \n 6 1     33    112   5     24    09   \n 7 2     62    0     1     24    09   \n 8 2     97    112   5     24    09   \n 9 1     261   106   1     24    09   \n10 1     76    89    1     24    09   \n# ℹ 590 more rows"
  },
  {
    "objectID": "ST558_Project1.html#single-year-function",
    "href": "ST558_Project1.html#single-year-function",
    "title": "ST558 Project 1",
    "section": "Single Year Function",
    "text": "Single Year Function\nIn this section we created a function that pulls one year of PUMS census data. This function allows you to input the year, numeric variables, categorical variables, and geography level/subsets and will build the URL, call the API, and then transform all the variables into their appropriate type, numeric, factor, or time. Additionally, this function runs checks on your inputs to ensure you have only asked for data as outline above.\nDictionaries: Many of the variables in our data get pulled from the API as their “key” value rather than their true value. Below stores all of the variable’s key values and their associated true value. We will use these later on in our function to properly replace the values that get pulled into their true form which we will then be able to manipulate and calculate summaries on.\n\n# There are redundant entries for these dictionaries\n# For example, the API would on some years use \"09\" and others \"9\"\n\n# Categorical Variables\nFER_dict &lt;- c(\"0\" = \"N/A (less than 15 years/greater than 50 years/ male)\",\n              \"1\" = \"Yes\",\n              \"2\" = \"No\")\n\nHHL_dict &lt;- c(\"0\" = \"N/A (GQ/vacant)\",\n              \"1\" = \"English Only\",\n              \"2\" = \"Spanish\",\n              \"3\" = \"Other Indo-European languages\",\n              \"4\" = \"Asian and Pacific Island languages\",\n              \"5\" = \"Other Language\")\n\nHISPEED_dict &lt;- c(\"0\" = \"N/A (GQ/vacant/no paid access to the internet)\",\n                  \"1\" = \"Yes\",\n                  \"2\" = \"No\")\n\nJWTRNS_dict &lt;- c(\"0\" = \"N/A (not a worker-not in the labor force, including persons under 16 years; unemployed; employed, with a job but not at work; Armed Forces, with a job but not at work)\",\n                 \"10\" = \"Walked\",\n                 \"11\" = \"Worked from home\",\n                 \"12\" = \"Other method\",\n                 \"7\" = \"Taxicab\",\n                 \"07\" = \"Taxicab\",\n                 \"2\" = \"Bus\",\n                 \"02\" = \"Bus\",\n                 \"5\" = \"Light rail, streetcar, or trolley\",\n                 \"05\" = \"Light rail, streetcar, or trolley\",\n                 \"4\" = \"Long-distance train or commuter rail\",\n                 \"04\" = \"Long-distance train or commuter rail\",\n                 \"9\" = \"Bicycle\",\n                 \"09\" = \"Bicycle\",\n                 \"1\" = \"Car, truck, or van\",\n                 \"01\" = \"Car, truck, or van\",\n                 \"3\" = \"Subway or elevated rail\",\n                 \"03\" = \"Subway or elevated rail\",\n                 \"6\" = \"Ferryboat\",\n                 \"06\" = \"Ferryboat\",\n                 \"8\" = \"Motorcycle\",\n                 \"08\" = \"Motorcycle\")\n\nSCH_dict &lt;- c(\"0\" = \"N/A (less than 3 years old)\",\n              \"1\" = \"No, has not attended in the last 3 months\",\n              \"2\" = \"Yes, public school or public college\",\n              \"3\" = \"Yes, private school or college or home school\")\n\nSCHL_dict &lt;- c(\"16\" = \"Regular high school diploma\",\n               \"1\" = \"No schooling completed\",\n               \"01\" = \"No schooling completed\",\n               \"4\" = \"Grade 1\",\n               \"04\" = \"Grade 1\",\n               \"3\" = \"Kindergarten\",\n               \"03\" = \"Kindergarten\",\n               \"7\" = \"Grade 4\",\n               \"07\" = \"Grade 4\",\n               \"23\" = \"Professional degree beyond a bachelor's degree\",\n               \"19\" = \"1 or more years of college credit, no degree\",\n               \"22\" = \"Master's degree\",\n               \"10\" = \"Grade 7\",\n               \"20\" = \"Associate's degree\",\n               \"0\" = \"N/A (less than 3 years old)\",\n               \"2\" = \"Nursery school, preschool\",\n               \"02\" = \"Nursery school, preschool\",\n               \"21\" = \"Bachelor's degree\",\n               \"8\" = \"Grade 5\",\n               \"08\" = \"Grade 5\",\n               \"24\" = \"Doctorate degree\",\n               \"6\" = \"Grade 3\",\n               \"06\" = \"Grade 3\",\n               \"14\" = \"Grade 11\",\n               \"17\" = \"GED or alternative credential\",\n               \"12\" = \"Grade 9\",\n               \"15\" = \"12th grade - no diploma\",\n               \"13\" = \"Grade 10\",\n               \"5\" = \"Grade 2\",\n               \"05\" = \"Grade 2\",\n               \"11\" = \"Grade 8\",\n               \"18\" = \"Some college, but less than 1 year\",\n               \"9\" = \"Grade 6\",\n               \"09\" = \"Grade 6\")\n\nSEX_dict &lt;- c(\"1\" = \"male\",\n              \"2\" = \"female\")\n\n# Geo Level Variables\nregion_dict &lt;- c(\"1\" = \"Northeast\",\n      \"9\" = \"Puerto Rico\",\n      \"3\" = \"South\",\n      \"2\" = \"Midwest\",\n      \"4\" = \"West\")\n\ndivision_dict &lt;- c(\"7\" = \"West South Central (South Region)\",\n      \"2\" = \"Middle Atlantic (Northeast region)\",\n      \"4\" = \"West North Central (Midwest region)\",\n      \"6\" = \"East South Central (South region)\",\n      \"3\" = \"East North Central (Midwest region)\",\n      \"9\" = \"Pacific (West region)\",\n      \"0\" = \"Puerto Rico\",\n      \"5\" = \"South Atlantic (South region)\",\n      \"8\" = \"Mountain (West region)\",\n      \"1\" = \"New England (Northeast region)\")\n\nstate_dict &lt;- c(\"1\" = \"Alabama/AL\",\n      \"01\" = \"Alabama/AL\",\n      \"49\" = \"Utah/UT\",\n      \"21\" = \"Kentucky/KY\",\n      \"26\" = \"Michigan/MI\",\n      \"29\" = \"Missouri/MO\",\n      \"32\" = \"Nevada/NV\",\n      \"34\" = \"New Jersey/NJ\",\n      \"8\" = \"Colorado/CO\",\n      \"08\" = \"Colorado/CO\",\n      \"51\" = \"Virginia/VA\",\n      \"39\" = \"Ohio/OH\",\n      \"2\" = \"Alaska/AK\",\n      \"02\" = \"Alaska/AK\",\n      \"46\" = \"South Dakota/SD\",\n      \"4\" = \"Arizona/AZ\",\n      \"04\" = \"Arizona/AZ\",\n      \"6\" = \"California/CA\",\n      \"06\" = \"California/CA\",\n      \"55\" = \"Wisconsin/WI\",\n      \"15\" = \"Hawaii/HI\",\n      \"22\" = \"Louisiana/LA\",\n      \"30\" = \"Montana/MT\",\n      \"47\" = \"Tennessee/TN\",\n      \"48\" = \"Texas/TX\",\n      \"9\" = \"Connecticut/CT\",\n      \"09\" = \"Connecticut/CT\",\n      \"50\" = \"Vermont/VT\",\n      \"53\" = \"Washington/WA\",\n      \"17\" = \"Illinois/IL\",\n      \"20\" = \"Kansas/KS\",\n      \"72\" = \"Puerto Rico/PR\",\n      \"35\" = \"New Mexico/NM\",\n      \"36\" = \"New York/NY\",\n      \"10\" = \"Delaware/DE\",\n      \"11\" = \"District of Columbia/DC\",\n      \"12\" = \"Florida/FL\",\n      \"56\" = \"Wyoming/WY\",\n      \"16\" = \"Idaho/ID\",\n      \"25\" = \"Massachusetts/MA\",\n      \"27\" = \"Minnesota/MN\",\n      \"42\" = \"Pennsylvania/PA\",\n      \"45\" = \"South Carolina/SC\",\n      \"13\" = \"Georgia/GA\",\n      \"23\" = \"Maine/ME\",\n      \"24\" = \"Maryland/MD\",\n      \"28\" = \"Mississippi/MS\",\n      \"37\" = \"North Carolina/NC\",\n      \"41\" = \"Oregon/OR\",\n      \"5\" = \"Arkansas/AR\",\n      \"05\" = \"Arkansas/AR\",\n      \"19\" = \"Iowa/IA\",\n      \"31\" = \"Nebraska/NE\",\n      \"33\" = \"New Hampshire/NH\",\n      \"44\" = \"Rhode Island/RI\",\n      \"54\" = \"West Virginia/WV\",\n      \"18\" = \"Indiana/IN\",\n      \"38\" = \"North Dakota/ND\",\n      \"40\" = \"Oklahoma/OK\")\n\n# Time Variables\nJWAP_dict &lt;- c(\n      \"258\" = \"9:40 p.m. to 9:44 p.m.\",\n      \"260\" = \"9:50 p.m. to 9:54 p.m.\",\n      \"261\" = \"9:55 p.m. to 9:59 p.m.\",\n      \"274\" = \"11:00 p.m. to 11:04 p.m.\",\n      \"48\" = \"4:10 a.m. to 4:14 a.m.\",\n      \"048\" = \"4:10 a.m. to 4:14 a.m.\",\n      \"58\" = \"5:00 a.m. to 5:04 a.m.\",\n      \"058\" = \"5:00 a.m. to 5:04 a.m.\",\n      \"76\" = \"6:30 a.m. to 6:34 a.m.\",\n      \"076\" = \"6:30 a.m. to 6:34 a.m.\",\n      \"91\" = \"7:45 a.m. to 7:49 a.m.\",\n      \"091\" = \"7:45 a.m. to 7:49 a.m.\",\n      \"94\" = \"8:00 a.m. to 8:04 a.m.\",\n      \"094\" = \"8:00 a.m. to 8:04 a.m.\",\n      \"122\" = \"10:20 a.m. to 10:24 a.m.\",\n      \"142\" = \"12:00 p.m. to 12:04 p.m.\",\n      \"146\" = \"12:20 p.m. to 12:24 p.m.\",\n      \"163\" = \"1:45 p.m. to 1:49 p.m.\",\n      \"165\" = \"1:55 p.m. to 1:59 p.m.\",\n      \"171\" = \"2:25 p.m. to 2:29 p.m.\",\n      \"184\" = \"3:30 p.m. to 3:34 p.m.\",\n      \"189\" = \"3:55 p.m. to 3:59 p.m.\",\n      \"192\" = \"4:10 p.m. to 4:14 p.m.\",\n      \"198\" = \"4:40 p.m. to 4:44 p.m.\",\n      \"210\" = \"5:40 p.m. to 5:44 p.m.\",\n      \"218\" = \"6:20 p.m. to 6:24 p.m.\",\n      \"220\" = \"6:30 p.m. to 6:34 p.m.\",\n      \"221\" = \"6:35 p.m. to 6:39 p.m.\",\n      \"222\" = \"6:40 p.m. to 6:44 p.m.\",\n      \"224\" = \"6:50 p.m. to 6:54 p.m.\",\n      \"227\" = \"7:05 p.m. to 7:09 p.m.\",\n      \"228\" = \"7:10 p.m. to 7:14 p.m.\",\n      \"251\" = \"9:05 p.m. to 9:09 p.m.\",\n      \"256\" = \"9:30 p.m. to 9:34 p.m.\",\n      \"259\" = \"9:45 p.m. to 9:49 p.m.\",\n      \"262\" = \"10:00 p.m. to 10:04 p.m.\",\n      \"270\" = \"10:40 p.m. to 10:44 p.m.\",\n      \"271\" = \"10:45 p.m. to 10:49 p.m.\",\n      \"276\" = \"11:10 p.m. to 11:14 p.m.\",\n      \"284\" = \"11:50 p.m. to 11:54 p.m.\",\n      \"6\" = \"12:25 a.m. to 12:29 a.m.\",\n      \"006\" = \"12:25 a.m. to 12:29 a.m.\",\n      \"8\" = \"12:40 a.m. to 12:44 a.m.\",\n      \"008\" = \"12:40 a.m. to 12:44 a.m.\",\n      \"9\" = \"12:45 a.m. to 12:49 a.m.\",\n      \"009\" = \"12:45 a.m. to 12:49 a.m.\",\n      \"11\" = \"1:00 a.m. to 1:04 a.m.\",\n      \"011\" = \"1:00 a.m. to 1:04 a.m.\",\n      \"17\" = \"1:30 a.m. to 1:34 a.m.\",\n      \"017\" = \"1:30 a.m. to 1:34 a.m.\",\n      \"20\" = \"1:45 a.m. to 1:49 a.m.\",\n      \"020\" = \"1:45 a.m. to 1:49 a.m.\",\n      \"31\" = \"2:45 a.m. to 2:49 a.m.\",\n      \"031\" = \"2:45 a.m. to 2:49 a.m.\",\n      \"39\" = \"3:25 a.m. to 3:29 a.m.\",\n      \"039\" = \"3:25 a.m. to 3:29 a.m.\",\n      \"53\" = \"4:35 a.m. to 4:39 a.m.\",\n      \"053\" = \"4:35 a.m. to 4:39 a.m.\",\n      \"65\" = \"5:35 a.m. to 5:39 a.m.\",\n      \"065\" = \"5:35 a.m. to 5:39 a.m.\",\n      \"75\" = \"6:25 a.m. to 6:29 a.m.\",\n      \"075\" = \"6:25 a.m. to 6:29 a.m.\",\n      \"85\" = \"7:15 a.m. to 7:19 a.m.\",\n      \"085\" = \"7:15 a.m. to 7:19 a.m.\",\n      \"90\" = \"7:40 a.m. to 7:44 a.m.\",\n      \"090\" = \"7:40 a.m. to 7:44 a.m.\",\n      \"101\" = \"8:35 a.m. to 8:39 a.m.\",\n      \"107\" = \"9:05 a.m. to 9:09 a.m.\",\n      \"121\" = \"10:15 a.m. to 10:19 a.m.\",\n      \"124\" = \"10:30 a.m. to 10:34 a.m.\",\n      \"137\" = \"11:35 a.m. to 11:39 a.m.\",\n      \"156\" = \"1:10 p.m. to 1:14 p.m.\",\n      \"164\" = \"1:50 p.m. to 1:54 p.m.\",\n      \"173\" = \"2:35 p.m. to 2:39 p.m.\",\n      \"197\" = \"4:35 p.m. to 4:39 p.m.\",\n      \"202\" = \"5:00 p.m. to 5:04 p.m.\",\n      \"234\" = \"7:40 p.m. to 7:44 p.m.\",\n      \"235\" = \"7:45 p.m. to 7:49 p.m.\",\n      \"246\" = \"8:40 p.m. to 8:44 p.m.\",\n      \"249\" = \"8:55 p.m. to 8:59 p.m.\",\n      \"257\" = \"9:35 p.m. to 9:39 p.m.\",\n      \"273\" = \"10:55 p.m. to 10:59 p.m.\",\n      \"277\" = \"11:15 p.m. to 11:19 p.m.\",\n      \"2\" = \"12:05 a.m. to 12:09 a.m.\",\n      \"002\" = \"12:05 a.m. to 12:09 a.m.\",\n      \"4\" = \"12:15 a.m. to 12:19 a.m.\",\n      \"004\" = \"12:15 a.m. to 12:19 a.m.\",\n      \"15\" = \"1:20 a.m. to 1:24 a.m.\",\n      \"015\" = \"1:20 a.m. to 1:24 a.m.\",\n      \"34\" = \"3:00 a.m. to 3:04 a.m.\",\n      \"034\" = \"3:00 a.m. to 3:04 a.m.\",\n      \"35\" = \"3:05 a.m. to 3:09 a.m.\",\n      \"035\" = \"3:05 a.m. to 3:09 a.m.\",\n      \"42\" = \"3:40 a.m. to 3:44 a.m.\",\n      \"042\" = \"3:40 a.m. to 3:44 a.m.\",\n      \"44\" = \"3:50 a.m. to 3:54 a.m.\",\n      \"044\" = \"3:50 a.m. to 3:54 a.m.\",\n      \"50\" = \"4:20 a.m. to 4:24 a.m.\",\n      \"050\" = \"4:20 a.m. to 4:24 a.m.\",\n      \"52\" = \"4:30 a.m. to 4:34 a.m.\",\n      \"052\" = \"4:30 a.m. to 4:34 a.m.\",\n      \"55\" = \"4:45 a.m. to 4:49 a.m.\",\n      \"055\" = \"4:45 a.m. to 4:49 a.m.\",\n      \"69\" = \"5:55 a.m. to 5:59 a.m.\",\n      \"069\" = \"5:55 a.m. to 5:59 a.m.\",\n      \"71\" = \"6:05 a.m. to 6:09 a.m.\",\n      \"071\" = \"6:05 a.m. to 6:09 a.m.\",\n      \"077\" = \"6:35 a.m. to 6:39 a.m.\",\n      \"079\" = \"6:45 a.m. to 6:49 a.m.\",\n      \"082\" = \"7:00 a.m. to 7:04 a.m.\",\n      \"089\" = \"7:35 a.m. to 7:39 a.m.\",\n      \"092\" = \"7:50 a.m. to 7:54 a.m.\",\n      \"093\" = \"7:55 a.m. to 7:59 a.m.\",\n      \"097\" = \"8:15 a.m. to 8:19 a.m.\",\n      \"77\" = \"6:35 a.m. to 6:39 a.m.\",\n      \"79\" = \"6:45 a.m. to 6:49 a.m.\",\n      \"82\" = \"7:00 a.m. to 7:04 a.m.\",\n      \"89\" = \"7:35 a.m. to 7:39 a.m.\",\n      \"92\" = \"7:50 a.m. to 7:54 a.m.\",\n      \"93\" = \"7:55 a.m. to 7:59 a.m.\",\n      \"97\" = \"8:15 a.m. to 8:19 a.m.\",\n      \"117\" = \"9:55 a.m. to 9:59 a.m.\",\n      \"118\" = \"10:00 a.m. to 10:04 a.m.\",\n      \"129\" = \"10:55 a.m. to 10:59 a.m.\",\n      \"132\" = \"11:10 a.m. to 11:14 a.m.\",\n      \"138\" = \"11:40 a.m. to 11:44 a.m.\",\n      \"144\" = \"12:10 p.m. to 12:14 p.m.\",\n      \"148\" = \"12:30 p.m. to 12:34 p.m.\",\n      \"150\" = \"12:40 p.m. to 12:44 p.m.\",\n      \"152\" = \"12:50 p.m. to 12:54 p.m.\",\n      \"166\" = \"2:00 p.m. to 2:04 p.m.\",\n      \"181\" = \"3:15 p.m. to 3:19 p.m.\",\n      \"183\" = \"3:25 p.m. to 3:29 p.m.\",\n      \"205\" = \"5:15 p.m. to 5:19 p.m.\",\n      \"219\" = \"6:25 p.m. to 6:29 p.m.\",\n      \"230\" = \"7:20 p.m. to 7:24 p.m.\",\n      \"233\" = \"7:35 p.m. to 7:39 p.m.\",\n      \"239\" = \"8:05 p.m. to 8:09 p.m.\",\n      \"244\" = \"8:30 p.m. to 8:34 p.m.\",\n      \"254\" = \"9:20 p.m. to 9:24 p.m.\",\n      \"265\" = \"10:15 p.m. to 10:19 p.m.\",\n      \"272\" = \"10:50 p.m. to 10:54 p.m.\",\n      \"013\" = \"1:10 a.m. to 1:14 a.m.\",\n      \"014\" = \"1:15 a.m. to 1:19 a.m.\",\n      \"019\" = \"1:40 a.m. to 1:44 a.m.\",\n      \"022\" = \"2:00 a.m. to 2:04 a.m.\",\n      \"033\" = \"2:55 a.m. to 2:59 a.m.\",\n      \"037\" = \"3:15 a.m. to 3:19 a.m.\",\n      \"041\" = \"3:35 a.m. to 3:39 a.m.\",\n      \"059\" = \"5:05 a.m. to 5:09 a.m.\",\n      \"067\" = \"5:45 a.m. to 5:49 a.m.\",\n      \"068\" = \"5:50 a.m. to 5:54 a.m.\",\n      \"074\" = \"6:20 a.m. to 6:24 a.m.\",\n      \"080\" = \"6:50 a.m. to 6:54 a.m.\",\n      \"084\" = \"7:10 a.m. to 7:14 a.m.\",\n      \"088\" = \"7:30 a.m. to 7:34 a.m.\",\n      \"095\" = \"8:05 a.m. to 8:09 a.m.\",\n      \"13\" = \"1:10 a.m. to 1:14 a.m.\",\n      \"14\" = \"1:15 a.m. to 1:19 a.m.\",\n      \"19\" = \"1:40 a.m. to 1:44 a.m.\",\n      \"22\" = \"2:00 a.m. to 2:04 a.m.\",\n      \"33\" = \"2:55 a.m. to 2:59 a.m.\",\n      \"37\" = \"3:15 a.m. to 3:19 a.m.\",\n      \"41\" = \"3:35 a.m. to 3:39 a.m.\",\n      \"59\" = \"5:05 a.m. to 5:09 a.m.\",\n      \"67\" = \"5:45 a.m. to 5:49 a.m.\",\n      \"68\" = \"5:50 a.m. to 5:54 a.m.\",\n      \"74\" = \"6:20 a.m. to 6:24 a.m.\",\n      \"80\" = \"6:50 a.m. to 6:54 a.m.\",\n      \"84\" = \"7:10 a.m. to 7:14 a.m.\",\n      \"88\" = \"7:30 a.m. to 7:34 a.m.\",\n      \"95\" = \"8:05 a.m. to 8:09 a.m.\",\n      \"100\" = \"8:30 a.m. to 8:34 a.m.\",\n      \"125\" = \"10:35 a.m. to 10:39 a.m.\",\n      \"140\" = \"11:50 a.m. to 11:54 a.m.\",\n      \"172\" = \"2:30 p.m. to 2:34 p.m.\",\n      \"178\" = \"3:00 p.m. to 3:04 p.m.\",\n      \"182\" = \"3:20 p.m. to 3:24 p.m.\",\n      \"185\" = \"3:35 p.m. to 3:39 p.m.\",\n      \"187\" = \"3:45 p.m. to 3:49 p.m.\",\n      \"199\" = \"4:45 p.m. to 4:49 p.m.\",\n      \"206\" = \"5:20 p.m. to 5:24 p.m.\",\n      \"208\" = \"5:30 p.m. to 5:34 p.m.\",\n      \"209\" = \"5:35 p.m. to 5:39 p.m.\",\n      \"243\" = \"8:25 p.m. to 8:29 p.m.\",\n      \"268\" = \"10:30 p.m. to 10:34 p.m.\",\n      \"269\" = \"10:35 p.m. to 10:39 p.m.\",\n      \"279\" = \"11:25 p.m. to 11:29 p.m.\",\n      \"001\" = \"12:00 a.m. to 12:04 a.m.\",\n      \"005\" = \"12:20 a.m. to 12:24 a.m.\",\n      \"007\" = \"12:30 a.m. to 12:39 a.m.\",\n      \"023\" = \"2:05 a.m. to 2:09 a.m.\",\n      \"025\" = \"2:15 a.m. to 2:19 a.m.\",\n      \"029\" = \"2:35 a.m. to 2:39 a.m.\",\n      \"036\" = \"3:10 a.m. to 3:14 a.m.\",\n      \"043\" = \"3:45 a.m. to 3:49 a.m.\",\n      \"046\" = \"4:00 a.m. to 4:04 a.m.\",\n      \"051\" = \"4:25 a.m. to 4:29 a.m.\",\n      \"056\" = \"4:50 a.m. to 4:54 a.m.\",\n      \"073\" = \"6:15 a.m. to 6:19 a.m.\",\n      \"081\" = \"6:55 a.m. to 6:59 a.m.\",\n      \"098\" = \"8:20 a.m. to 8:24 a.m.\",\n      \"1\" = \"12:00 a.m. to 12:04 a.m.\",\n      \"5\" = \"12:20 a.m. to 12:24 a.m.\",\n      \"7\" = \"12:30 a.m. to 12:39 a.m.\",\n      \"23\" = \"2:05 a.m. to 2:09 a.m.\",\n      \"25\" = \"2:15 a.m. to 2:19 a.m.\",\n      \"29\" = \"2:35 a.m. to 2:39 a.m.\",\n      \"36\" = \"3:10 a.m. to 3:14 a.m.\",\n      \"43\" = \"3:45 a.m. to 3:49 a.m.\",\n      \"46\" = \"4:00 a.m. to 4:04 a.m.\",\n      \"51\" = \"4:25 a.m. to 4:29 a.m.\",\n      \"56\" = \"4:50 a.m. to 4:54 a.m.\",\n      \"73\" = \"6:15 a.m. to 6:19 a.m.\",\n      \"81\" = \"6:55 a.m. to 6:59 a.m.\",\n      \"98\" = \"8:20 a.m. to 8:24 a.m.\",\n      \"103\" = \"8:45 a.m. to 8:49 a.m.\",\n      \"106\" = \"9:00 a.m. to 9:04 a.m.\",\n      \"114\" = \"9:40 a.m. to 9:44 a.m.\",\n      \"135\" = \"11:25 a.m. to 11:29 a.m.\",\n      \"143\" = \"12:05 p.m. to 12:09 p.m.\",\n      \"149\" = \"12:35 p.m. to 12:39 p.m.\",\n      \"157\" = \"1:15 p.m. to 1:19 p.m.\",\n      \"158\" = \"1:20 p.m. to 1:24 p.m.\",\n      \"160\" = \"1:30 p.m. to 1:34 p.m.\",\n      \"170\" = \"2:20 p.m. to 2:24 p.m.\",\n      \"174\" = \"2:40 p.m. to 2:44 p.m.\",\n      \"179\" = \"3:05 p.m. to 3:09 p.m.\",\n      \"194\" = \"4:20 p.m. to 4:24 p.m.\",\n      \"196\" = \"4:30 p.m. to 4:34 p.m.\",\n      \"211\" = \"5:45 p.m. to 5:49 p.m.\",\n      \"212\" = \"5:50 p.m. to 5:54 p.m.\",\n      \"214\" = \"6:00 p.m. to 6:04 p.m.\",\n      \"241\" = \"8:15 p.m. to 8:19 p.m.\",\n      \"264\" = \"10:10 p.m. to 10:14 p.m.\",\n      \"266\" = \"10:20 p.m. to 10:24 p.m.\",\n      \"016\" = \"1:25 a.m. to 1:29 a.m.\",\n      \"018\" = \"1:35 a.m. to 1:39 a.m.\",\n      \"021\" = \"1:50 a.m. to 1:59 a.m.\",\n      \"028\" = \"2:30 a.m. to 2:34 a.m.\",\n      \"054\" = \"4:40 a.m. to 4:44 a.m.\",\n      \"060\" = \"5:10 a.m. to 5:14 a.m.\",\n      \"064\" = \"5:30 a.m. to 5:34 a.m.\",\n      \"070\" = \"6:00 a.m. to 6:04 a.m.\",\n      \"078\" = \"6:40 a.m. to 6:44 a.m.\",\n      \"087\" = \"7:25 a.m. to 7:29 a.m.\",\n      \"16\" = \"1:25 a.m. to 1:29 a.m.\",\n      \"18\" = \"1:35 a.m. to 1:39 a.m.\",\n      \"21\" = \"1:50 a.m. to 1:59 a.m.\",\n      \"28\" = \"2:30 a.m. to 2:34 a.m.\",\n      \"54\" = \"4:40 a.m. to 4:44 a.m.\",\n      \"60\" = \"5:10 a.m. to 5:14 a.m.\",\n      \"64\" = \"5:30 a.m. to 5:34 a.m.\",\n      \"70\" = \"6:00 a.m. to 6:04 a.m.\",\n      \"78\" = \"6:40 a.m. to 6:44 a.m.\",\n      \"87\" = \"7:25 a.m. to 7:29 a.m.\",\n      \"105\" = \"8:55 a.m. to 8:59 a.m.\",\n      \"111\" = \"9:25 a.m. to 9:29 a.m.\",\n      \"119\" = \"10:05 a.m. to 10:09 a.m.\",\n      \"123\" = \"10:25 a.m. to 10:29 a.m.\",\n      \"126\" = \"10:40 a.m. to 10:44 a.m.\",\n      \"134\" = \"11:20 a.m. to 11:24 a.m.\",\n      \"139\" = \"11:45 a.m. to 11:49 a.m.\",\n      \"141\" = \"11:55 a.m. to 11:59 a.m.\",\n      \"151\" = \"12:45 p.m. to 12:49 p.m.\",\n      \"153\" = \"12:55 p.m. to 12:59 p.m.\",\n      \"169\" = \"2:15 p.m. to 2:19 p.m.\",\n      \"180\" = \"3:10 p.m. to 3:14 p.m.\",\n      \"203\" = \"5:05 p.m. to 5:09 p.m.\",\n      \"204\" = \"5:10 p.m. to 5:14 p.m.\",\n      \"207\" = \"5:25 p.m. to 5:29 p.m.\",\n      \"215\" = \"6:05 p.m. to 6:09 p.m.\",\n      \"216\" = \"6:10 p.m. to 6:14 p.m.\",\n      \"217\" = \"6:15 p.m. to 6:19 p.m.\",\n      \"223\" = \"6:45 p.m. to 6:49 p.m.\",\n      \"225\" = \"6:55 p.m. to 6:59 p.m.\",\n      \"247\" = \"8:45 p.m. to 8:49 p.m.\",\n      \"248\" = \"8:50 p.m. to 8:54 p.m.\",\n      \"252\" = \"9:10 p.m. to 9:14 p.m.\",\n      \"253\" = \"9:15 p.m. to 9:19 p.m.\",\n      \"255\" = \"9:25 p.m. to 9:29 p.m.\",\n      \"263\" = \"10:05 p.m. to 10:09 p.m.\",\n      \"267\" = \"10:25 p.m. to 10:29 p.m.\",\n      \"278\" = \"11:20 p.m. to 11:24 p.m.\",\n      \"280\" = \"11:30 p.m. to 11:34 p.m.\",\n      \"281\" = \"11:35 p.m. to 11:39 p.m.\",\n      \"282\" = \"11:40 p.m. to 11:44 p.m.\",\n      \"0\" = NA,\n      \"003\" = \"12:10 a.m. to 12:14 a.m.\",\n      \"010\" = \"12:50 a.m. to 12:59 a.m.\",\n      \"038\" = \"3:20 a.m. to 3:24 a.m.\",\n      \"049\" = \"4:15 a.m. to 4:19 a.m.\",\n      \"057\" = \"4:55 a.m. to 4:59 a.m.\",\n      \"061\" = \"5:15 a.m. to 5:19 a.m.\",\n      \"062\" = \"5:20 a.m. to 5:24 a.m.\",\n      \"072\" = \"6:10 a.m. to 6:14 a.m.\",\n      \"083\" = \"7:05 a.m. to 7:09 a.m.\",\n      \"3\" = \"12:10 a.m. to 12:14 a.m.\",\n      \"10\" = \"12:50 a.m. to 12:59 a.m.\",\n      \"38\" = \"3:20 a.m. to 3:24 a.m.\",\n      \"49\" = \"4:15 a.m. to 4:19 a.m.\",\n      \"57\" = \"4:55 a.m. to 4:59 a.m.\",\n      \"61\" = \"5:15 a.m. to 5:19 a.m.\",\n      \"62\" = \"5:20 a.m. to 5:24 a.m.\",\n      \"72\" = \"6:10 a.m. to 6:14 a.m.\",\n      \"83\" = \"7:05 a.m. to 7:09 a.m.\",\n      \"104\" = \"8:50 a.m. to 8:54 a.m.\",\n      \"108\" = \"9:10 a.m. to 9:14 a.m.\",\n      \"116\" = \"9:50 a.m. to 9:54 a.m.\",\n      \"128\" = \"10:50 a.m. to 10:54 a.m.\",\n      \"133\" = \"11:15 a.m. to 11:19 a.m.\",\n      \"136\" = \"11:30 a.m. to 11:34 a.m.\",\n      \"147\" = \"12:25 p.m. to 12:29 p.m.\",\n      \"154\" = \"1:00 p.m. to 1:04 p.m.\",\n      \"155\" = \"1:05 p.m. to 1:09 p.m.\",\n      \"161\" = \"1:35 p.m. to 1:39 p.m.\",\n      \"162\" = \"1:40 p.m. to 1:44 p.m.\",\n      \"167\" = \"2:05 p.m. to 2:09 p.m.\",\n      \"175\" = \"2:45 p.m. to 2:49 p.m.\",\n      \"177\" = \"2:55 p.m. to 2:59 p.m.\",\n      \"186\" = \"3:40 p.m. to 3:44 p.m.\",\n      \"190\" = \"4:00 p.m. to 4:04 p.m.\",\n      \"191\" = \"4:05 p.m. to 4:09 p.m.\",\n      \"193\" = \"4:15 p.m. to 4:19 p.m.\",\n      \"200\" = \"4:50 p.m. to 4:54 p.m.\",\n      \"201\" = \"4:55 p.m. to 4:59 p.m.\",\n      \"226\" = \"7:00 p.m. to 7:04 p.m.\",\n      \"232\" = \"7:30 p.m. to 7:34 p.m.\",\n      \"236\" = \"7:50 p.m. to 7:54 p.m.\",\n      \"237\" = \"7:55 p.m. to 7:59 p.m.\",\n      \"238\" = \"8:00 p.m. to 8:04 p.m.\",\n      \"240\" = \"8:10 p.m. to 8:14 p.m.\",\n      \"242\" = \"8:20 p.m. to 8:24 p.m.\",\n      \"245\" = \"8:35 p.m. to 8:39 p.m.\",\n      \"250\" = \"9:00 p.m. to 9:04 p.m.\",\n      \"275\" = \"11:05 p.m. to 11:09 p.m.\",\n      \"283\" = \"11:45 p.m. to 11:49 p.m.\",\n      \"285\" = \"11:55 p.m. to 11:59 p.m.\",\n      \"012\" = \"1:05 a.m. to 1:09 a.m.\",\n      \"024\" = \"2:10 a.m. to 2:14 a.m.\",\n      \"026\" = \"2:20 a.m. to 2:24 a.m.\",\n      \"027\" = \"2:25 a.m. to 2:29 a.m.\",\n      \"030\" = \"2:40 a.m. to 2:44 a.m.\",\n      \"032\" = \"2:50 a.m. to 2:54 a.m.\",\n      \"040\" = \"3:30 a.m. to 3:34 a.m.\",\n      \"045\" = \"3:55 a.m. to 3:59 a.m.\",\n      \"047\" = \"4:05 a.m. to 4:09 a.m.\",\n      \"063\" = \"5:25 a.m. to 5:29 a.m.\",\n      \"066\" = \"5:40 a.m. to 5:44 a.m.\",\n      \"086\" = \"7:20 a.m. to 7:24 a.m.\",\n      \"096\" = \"8:10 a.m. to 8:14 a.m.\",\n      \"099\" = \"8:25 a.m. to 8:29 a.m.\",\n      \"12\" = \"1:05 a.m. to 1:09 a.m.\",\n      \"24\" = \"2:10 a.m. to 2:14 a.m.\",\n      \"26\" = \"2:20 a.m. to 2:24 a.m.\",\n      \"27\" = \"2:25 a.m. to 2:29 a.m.\",\n      \"30\" = \"2:40 a.m. to 2:44 a.m.\",\n      \"32\" = \"2:50 a.m. to 2:54 a.m.\",\n      \"40\" = \"3:30 a.m. to 3:34 a.m.\",\n      \"45\" = \"3:55 a.m. to 3:59 a.m.\",\n      \"47\" = \"4:05 a.m. to 4:09 a.m.\",\n      \"63\" = \"5:25 a.m. to 5:29 a.m.\",\n      \"66\" = \"5:40 a.m. to 5:44 a.m.\",\n      \"86\" = \"7:20 a.m. to 7:24 a.m.\",\n      \"96\" = \"8:10 a.m. to 8:14 a.m.\",\n      \"99\" = \"8:25 a.m. to 8:29 a.m.\",\n      \"102\" = \"8:40 a.m. to 8:44 a.m.\",\n      \"109\" = \"9:15 a.m. to 9:19 a.m.\",\n      \"110\" = \"9:20 a.m. to 9:24 a.m.\",\n      \"112\" = \"9:30 a.m. to 9:34 a.m.\",\n      \"113\" = \"9:35 a.m. to 9:39 a.m.\",\n      \"115\" = \"9:45 a.m. to 9:49 a.m.\",\n      \"120\" = \"10:10 a.m. to 10:14 a.m.\",\n      \"127\" = \"10:45 a.m. to 10:49 a.m.\",\n      \"130\" = \"11:00 a.m. to 11:04 a.m.\",\n      \"131\" = \"11:05 a.m. to 11:09 a.m.\",\n      \"145\" = \"12:15 p.m. to 12:19 p.m.\",\n      \"159\" = \"1:25 p.m. to 1:29 p.m.\",\n      \"168\" = \"2:10 p.m. to 2:14 p.m.\",\n      \"176\" = \"2:50 p.m. to 2:54 p.m.\",\n      \"188\" = \"3:50 p.m. to 3:54 p.m.\",\n      \"195\" = \"4:25 p.m. to 4:29 p.m.\",\n      \"213\" = \"5:55 p.m. to 5:59 p.m.\",\n      \"229\" = \"7:15 p.m. to 7:19 p.m.\",\n      \"231\" = \"7:25 p.m. to 7:29 p.m.\"\n)\n\nJWDP_dict &lt;-  c(\n      \"014\" = \"4:10 a.m. to 4:19 a.m.\",\n      \"015\" = \"4:20 a.m. to 4:29 a.m.\",\n      \"017\" = \"4:40 a.m. to 4:49 a.m.\",\n      \"022\" = \"5:15 a.m. to 5:19 a.m.\",\n      \"035\" = \"6:20 a.m. to 6:24 a.m.\",\n      \"046\" = \"7:15 a.m. to 7:19 a.m.\",\n      \"065\" = \"8:50 a.m. to 8:54 a.m.\",\n      \"068\" = \"9:05 a.m. to 9:09 a.m.\",\n      \"076\" = \"9:45 a.m. to 9:49 a.m.\",\n      \"079\" = \"10:00 a.m. to 10:09 a.m.\",\n      \"083\" = \"10:40 a.m. to 10:49 a.m.\",\n      \"085\" = \"11:00 a.m. to 11:09 a.m.\",\n      \"086\" = \"11:10 a.m. to 11:19 a.m.\",\n      \"14\" = \"4:10 a.m. to 4:19 a.m.\",\n      \"15\" = \"4:20 a.m. to 4:29 a.m.\",\n      \"17\" = \"4:40 a.m. to 4:49 a.m.\",\n      \"22\" = \"5:15 a.m. to 5:19 a.m.\",\n      \"35\" = \"6:20 a.m. to 6:24 a.m.\",\n      \"46\" = \"7:15 a.m. to 7:19 a.m.\",\n      \"65\" = \"8:50 a.m. to 8:54 a.m.\",\n      \"68\" = \"9:05 a.m. to 9:09 a.m.\",\n      \"76\" = \"9:45 a.m. to 9:49 a.m.\",\n      \"79\" = \"10:00 a.m. to 10:09 a.m.\",\n      \"83\" = \"10:40 a.m. to 10:49 a.m.\",\n      \"85\" = \"11:00 a.m. to 11:09 a.m.\",\n      \"86\" = \"11:10 a.m. to 11:19 a.m.\",\n      \"103\" = \"2:00 p.m. to 2:09 p.m.\",\n      \"105\" = \"2:20 p.m. to 2:29 p.m.\",\n      \"118\" = \"4:30 p.m. to 4:39 p.m.\",\n      \"127\" = \"6:00 p.m. to 6:09 p.m.\",\n      \"130\" = \"6:30 p.m. to 6:39 p.m.\",\n      \"131\" = \"6:40 p.m. to 6:49 p.m.\",\n      \"139\" = \"9:20 p.m. to 9:29 p.m.\",\n      \"141\" = \"9:40 p.m. to 9:49 p.m.\",\n      \"149\" = \"11:00 p.m. to 11:29 p.m.\",\n      \"057\" = \"8:10 a.m. to 8:14 a.m.\",\n      \"059\" = \"8:20 a.m. to 8:24 a.m.\",\n      \"063\" = \"8:40 a.m. to 8:44 a.m.\",\n      \"066\" = \"8:55 a.m. to 8:59 a.m.\",\n      \"073\" = \"9:30 a.m. to 9:34 a.m.\",\n      \"078\" = \"9:55 a.m. to 9:59 a.m.\",\n      \"57\" = \"8:10 a.m. to 8:14 a.m.\",\n      \"59\" = \"8:20 a.m. to 8:24 a.m.\",\n      \"63\" = \"8:40 a.m. to 8:44 a.m.\",\n      \"66\" = \"8:55 a.m. to 8:59 a.m.\",\n      \"73\" = \"9:30 a.m. to 9:34 a.m.\",\n      \"78\" = \"9:55 a.m. to 9:59 a.m.\",\n      \"100\" = \"1:30 p.m. to 1:39 p.m.\",\n      \"101\" = \"1:40 p.m. to 1:49 p.m.\",\n      \"104\" = \"2:10 p.m. to 2:19 p.m.\",\n      \"107\" = \"2:40 p.m. to 2:49 p.m.\",\n      \"111\" = \"3:20 p.m. to 3:29 p.m.\",\n      \"116\" = \"4:10 p.m. to 4:19 p.m.\",\n      \"128\" = \"6:10 p.m. to 6:19 p.m.\",\n      \"150\" = \"11:30 p.m. to 11:59 p.m.\",\n      \"0\" = NA,\n      \"010\" = \"3:30 a.m. to 3:39 a.m.\",\n      \"011\" = \"3:40 a.m. to 3:49 a.m.\",\n      \"019\" = \"5:00 a.m. to 5:04 a.m.\",\n      \"028\" = \"5:45 a.m. to 5:49 a.m.\",\n      \"044\" = \"7:05 a.m. to 7:09 a.m.\",\n      \"045\" = \"7:10 a.m. to 7:14 a.m.\",\n      \"047\" = \"7:20 a.m. to 7:24 a.m.\",\n      \"049\" = \"7:30 a.m. to 7:34 a.m.\",\n      \"053\" = \"7:50 a.m. to 7:54 a.m.\",\n      \"055\" = \"8:00 a.m. to 8:04 a.m.\",\n      \"056\" = \"8:05 a.m. to 8:09 a.m.\",\n      \"084\" = \"10:50 a.m. to 10:59 a.m.\",\n      \"090\" = \"11:50 a.m. to 11:59 a.m.\",\n      \"092\" = \"12:10 p.m. to 12:19 p.m.\",\n      \"10\" = \"3:30 a.m. to 3:39 a.m.\",\n      \"11\" = \"3:40 a.m. to 3:49 a.m.\",\n      \"19\" = \"5:00 a.m. to 5:04 a.m.\",\n      \"28\" = \"5:45 a.m. to 5:49 a.m.\",\n      \"44\" = \"7:05 a.m. to 7:09 a.m.\",\n      \"45\" = \"7:10 a.m. to 7:14 a.m.\",\n      \"47\" = \"7:20 a.m. to 7:24 a.m.\",\n      \"49\" = \"7:30 a.m. to 7:34 a.m.\",\n      \"53\" = \"7:50 a.m. to 7:54 a.m.\",\n      \"55\" = \"8:00 a.m. to 8:04 a.m.\",\n      \"56\" = \"8:05 a.m. to 8:09 a.m.\",\n      \"84\" = \"10:50 a.m. to 10:59 a.m.\",\n      \"90\" = \"11:50 a.m. to 11:59 a.m.\",\n      \"92\" = \"12:10 p.m. to 12:19 p.m.\",\n      \"110\" = \"3:10 p.m. to 3:19 p.m.\",\n      \"112\" = \"3:30 p.m. to 3:39 p.m.\",\n      \"120\" = \"4:50 p.m. to 4:59 p.m.\",\n      \"132\" = \"6:50 p.m. to 6:59 p.m.\",\n      \"133\" = \"7:00 p.m. to 7:29 p.m.\",\n      \"134\" = \"7:30 p.m. to 7:59 p.m.\",\n      \"009\" = \"3:20 a.m. to 3:29 a.m.\",\n      \"023\" = \"5:20 a.m. to 5:24 a.m.\",\n      \"031\" = \"6:00 a.m. to 6:04 a.m.\",\n      \"038\" = \"6:35 a.m. to 6:39 a.m.\",\n      \"040\" = \"6:45 a.m. to 6:49 a.m.\",\n      \"050\" = \"7:35 a.m. to 7:39 a.m.\",\n      \"060\" = \"8:25 a.m. to 8:29 a.m.\",\n      \"062\" = \"8:35 a.m. to 8:39 a.m.\",\n      \"064\" = \"8:45 a.m. to 8:49 a.m.\",\n      \"067\" = \"9:00 a.m. to 9:04 a.m.\",\n      \"069\" = \"9:10 a.m. to 9:14 a.m.\",\n      \"082\" = \"10:30 a.m. to 10:39 a.m.\",\n      \"095\" = \"12:40 p.m. to 12:49 p.m.\",\n      \"096\" = \"12:50 p.m. to 12:59 p.m.\",\n      \"097\" = \"1:00 p.m. to 1:09 p.m.\",\n      \"9\" = \"3:20 a.m. to 3:29 a.m.\",\n      \"23\" = \"5:20 a.m. to 5:24 a.m.\",\n      \"31\" = \"6:00 a.m. to 6:04 a.m.\",\n      \"38\" = \"6:35 a.m. to 6:39 a.m.\",\n      \"40\" = \"6:45 a.m. to 6:49 a.m.\",\n      \"50\" = \"7:35 a.m. to 7:39 a.m.\",\n      \"60\" = \"8:25 a.m. to 8:29 a.m.\",\n      \"62\" = \"8:35 a.m. to 8:39 a.m.\",\n      \"64\" = \"8:45 a.m. to 8:49 a.m.\",\n      \"67\" = \"9:00 a.m. to 9:04 a.m.\",\n      \"69\" = \"9:10 a.m. to 9:14 a.m.\",\n      \"82\" = \"10:30 a.m. to 10:39 a.m.\",\n      \"95\" = \"12:40 p.m. to 12:49 p.m.\",\n      \"96\" = \"12:50 p.m. to 12:59 p.m.\",\n      \"97\" = \"1:00 p.m. to 1:09 p.m.\",\n      \"119\" = \"4:40 p.m. to 4:49 p.m.\",\n      \"121\" = \"5:00 p.m. to 5:09 p.m.\",\n      \"135\" = \"8:00 p.m. to 8:29 p.m.\",\n      \"003\" = \"1:00 a.m. to 1:29 a.m.\",\n      \"033\" = \"6:10 a.m. to 6:14 a.m.\",\n      \"036\" = \"6:25 a.m. to 6:29 a.m.\",\n      \"041\" = \"6:50 a.m. to 6:54 a.m.\",\n      \"061\" = \"8:30 a.m. to 8:34 a.m.\",\n      \"081\" = \"10:20 a.m. to 10:29 a.m.\",\n      \"093\" = \"12:20 p.m. to 12:29 p.m.\",\n      \"098\" = \"1:10 p.m. to 1:19 p.m.\",\n      \"3\" = \"1:00 a.m. to 1:29 a.m.\",\n      \"33\" = \"6:10 a.m. to 6:14 a.m.\",\n      \"36\" = \"6:25 a.m. to 6:29 a.m.\",\n      \"41\" = \"6:50 a.m. to 6:54 a.m.\",\n      \"61\" = \"8:30 a.m. to 8:34 a.m.\",\n      \"81\" = \"10:20 a.m. to 10:29 a.m.\",\n      \"93\" = \"12:20 p.m. to 12:29 p.m.\",\n      \"98\" = \"1:10 p.m. to 1:19 p.m.\",\n      \"102\" = \"1:50 p.m. to 1:59 p.m.\",\n      \"109\" = \"3:00 p.m. to 3:09 p.m.\",\n      \"115\" = \"4:00 p.m. to 4:09 p.m.\",\n      \"126\" = \"5:50 p.m. to 5:59 p.m.\",\n      \"143\" = \"10:00 p.m. to 10:09 p.m.\",\n      \"145\" = \"10:20 p.m. to 10:29 p.m.\",\n      \"001\" = \"12:00 a.m. to 12:29 a.m.\",\n      \"006\" = \"2:30 a.m. to 2:59 a.m.\",\n      \"012\" = \"3:50 a.m. to 3:59 a.m.\",\n      \"013\" = \"4:00 a.m. to 4:09 a.m.\",\n      \"016\" = \"4:30 a.m. to 4:39 a.m.\",\n      \"025\" = \"5:30 a.m. to 5:34 a.m.\",\n      \"026\" = \"5:35 a.m. to 5:39 a.m.\",\n      \"030\" = \"5:55 a.m. to 5:59 a.m.\",\n      \"077\" = \"9:50 a.m. to 9:54 a.m.\",\n      \"087\" = \"11:20 a.m. to 11:29 a.m.\",\n      \"088\" = \"11:30 a.m. to 11:39 a.m.\",\n      \"094\" = \"12:30 p.m. to 12:39 p.m.\",\n      \"1\" = \"12:00 a.m. to 12:29 a.m.\",\n      \"6\" = \"2:30 a.m. to 2:59 a.m.\",\n      \"12\" = \"3:50 a.m. to 3:59 a.m.\",\n      \"13\" = \"4:00 a.m. to 4:09 a.m.\",\n      \"16\" = \"4:30 a.m. to 4:39 a.m.\",\n      \"25\" = \"5:30 a.m. to 5:34 a.m.\",\n      \"26\" = \"5:35 a.m. to 5:39 a.m.\",\n      \"30\" = \"5:55 a.m. to 5:59 a.m.\",\n      \"77\" = \"9:50 a.m. to 9:54 a.m.\",\n      \"87\" = \"11:20 a.m. to 11:29 a.m.\",\n      \"88\" = \"11:30 a.m. to 11:39 a.m.\",\n      \"94\" = \"12:30 p.m. to 12:39 p.m.\",\n      \"106\" = \"2:30 p.m. to 2:39 p.m.\",\n      \"108\" = \"2:50 p.m. to 2:59 p.m.\",\n      \"122\" = \"5:10 p.m. to 5:19 p.m.\",\n      \"123\" = \"5:20 p.m. to 5:29 p.m.\",\n      \"124\" = \"5:30 p.m. to 5:39 p.m.\",\n      \"144\" = \"10:10 p.m. to 10:19 p.m.\",\n      \"002\" = \"12:30 a.m. to 12:59 a.m.\",\n      \"004\" = \"1:30 a.m. to 1:59 a.m.\",\n      \"005\" = \"2:00 a.m. to 2:29 a.m.\",\n      \"007\" = \"3:00 a.m. to 3:09 a.m.\",\n      \"020\" = \"5:05 a.m. to 5:09 a.m.\",\n      \"021\" = \"5:10 a.m. to 5:14 a.m.\",\n      \"024\" = \"5:25 a.m. to 5:29 a.m.\",\n      \"027\" = \"5:40 a.m. to 5:44 a.m.\",\n      \"034\" = \"6:15 a.m. to 6:19 a.m.\",\n      \"039\" = \"6:40 a.m. to 6:44 a.m.\",\n      \"042\" = \"6:55 a.m. to 6:59 a.m.\",\n      \"043\" = \"7:00 a.m. to 7:04 a.m.\",\n      \"048\" = \"7:25 a.m. to 7:29 a.m.\",\n      \"051\" = \"7:40 a.m. to 7:44 a.m.\",\n      \"058\" = \"8:15 a.m. to 8:19 a.m.\",\n      \"072\" = \"9:25 a.m. to 9:29 a.m.\",\n      \"074\" = \"9:35 a.m. to 9:39 a.m.\",\n      \"075\" = \"9:40 a.m. to 9:44 a.m.\",\n      \"091\" = \"12:00 p.m. to 12:09 p.m.\",\n      \"2\" = \"12:30 a.m. to 12:59 a.m.\",\n      \"4\" = \"1:30 a.m. to 1:59 a.m.\",\n      \"5\" = \"2:00 a.m. to 2:29 a.m.\",\n      \"7\" = \"3:00 a.m. to 3:09 a.m.\",\n      \"20\" = \"5:05 a.m. to 5:09 a.m.\",\n      \"21\" = \"5:10 a.m. to 5:14 a.m.\",\n      \"24\" = \"5:25 a.m. to 5:29 a.m.\",\n      \"27\" = \"5:40 a.m. to 5:44 a.m.\",\n      \"34\" = \"6:15 a.m. to 6:19 a.m.\",\n      \"39\" = \"6:40 a.m. to 6:44 a.m.\",\n      \"42\" = \"6:55 a.m. to 6:59 a.m.\",\n      \"43\" = \"7:00 a.m. to 7:04 a.m.\",\n      \"48\" = \"7:25 a.m. to 7:29 a.m.\",\n      \"51\" = \"7:40 a.m. to 7:44 a.m.\",\n      \"58\" = \"8:15 a.m. to 8:19 a.m.\",\n      \"72\" = \"9:25 a.m. to 9:29 a.m.\",\n      \"74\" = \"9:35 a.m. to 9:39 a.m.\",\n      \"75\" = \"9:40 a.m. to 9:44 a.m.\",\n      \"91\" = \"12:00 p.m. to 12:09 p.m.\",\n      \"113\" = \"3:40 p.m. to 3:49 p.m.\",\n      \"117\" = \"4:20 p.m. to 4:29 p.m.\",\n      \"125\" = \"5:40 p.m. to 5:49 p.m.\",\n      \"129\" = \"6:20 p.m. to 6:29 p.m.\",\n      \"136\" = \"8:30 p.m. to 8:59 p.m.\",\n      \"137\" = \"9:00 p.m. to 9:09 p.m.\",\n      \"140\" = \"9:30 p.m. to 9:39 p.m.\",\n      \"008\" = \"3:10 a.m. to 3:19 a.m.\",\n      \"018\" = \"4:50 a.m. to 4:59 a.m.\",\n      \"029\" = \"5:50 a.m. to 5:54 a.m.\",\n      \"032\" = \"6:05 a.m. to 6:09 a.m.\",\n      \"037\" = \"6:30 a.m. to 6:34 a.m.\",\n      \"052\" = \"7:45 a.m. to 7:49 a.m.\",\n      \"054\" = \"7:55 a.m. to 7:59 a.m.\",\n      \"070\" = \"9:15 a.m. to 9:19 a.m.\",\n      \"071\" = \"9:20 a.m. to 9:24 a.m.\",\n      \"080\" = \"10:10 a.m. to 10:19 a.m.\",\n      \"089\" = \"11:40 a.m. to 11:49 a.m.\",\n      \"099\" = \"1:20 p.m. to 1:29 p.m.\",\n      \"8\" = \"3:10 a.m. to 3:19 a.m.\",\n      \"18\" = \"4:50 a.m. to 4:59 a.m.\",\n      \"29\" = \"5:50 a.m. to 5:54 a.m.\",\n      \"32\" = \"6:05 a.m. to 6:09 a.m.\",\n      \"37\" = \"6:30 a.m. to 6:34 a.m.\",\n      \"52\" = \"7:45 a.m. to 7:49 a.m.\",\n      \"54\" = \"7:55 a.m. to 7:59 a.m.\",\n      \"70\" = \"9:15 a.m. to 9:19 a.m.\",\n      \"71\" = \"9:20 a.m. to 9:24 a.m.\",\n      \"80\" = \"10:10 a.m. to 10:19 a.m.\",\n      \"89\" = \"11:40 a.m. to 11:49 a.m.\",\n      \"99\" = \"1:20 p.m. to 1:29 p.m.\",\n      \"114\" = \"3:50 p.m. to 3:59 p.m.\",\n      \"138\" = \"9:10 p.m. to 9:19 p.m.\",\n      \"142\" = \"9:50 p.m. to 9:59 p.m.\",\n      \"146\" = \"10:30 p.m. to 10:39 p.m.\",\n      \"147\" = \"10:40 p.m. to 10:49 p.m.\",\n      \"148\" = \"10:50 p.m. to 10:59 p.m.\"\n)\n\nHere we create the actual function. The main components of the function are as follows 1. Checks the user input and stops the function if invalid 2. Takes user inputs and builds a URL 3. Used the helper function to call the API and return a tibble 4. Convert variables to true values (if needed) and convert to appropriate types including factors, numeric, and time.\nOther notes about the function:\nDefault inputs are year = 2022, numeric variables are PWGTP and AGEP, categorical variable is SEX, geography level is state at subset 09 (Connecticut).\nPWGTP must be called and there must be more than one numeric variable.\nAt least one categorical variable must be called.\n\n# specify the number of variables to be returned\ncall_API &lt;- function(year=2022, num_vars = c(\"PWGTP\", \"AGEP\"), cat_vars = c(\"SEX\"), geo_level = \"state\", geo_subset = \"09\") {\n  if (!is.numeric(year) | year &lt; 2010 | year &gt; 2022 | year == 2020) {\n  \n    stop(\"Year input invalid!\")  #checks input of year is numeric and between 2010 and 2022 and is not 2020. \n    \n  } else if (!is.element(\"PWGTP\", num_vars)) {\n  \n    stop(\"Numeric variables does not contain PWGTP\") #check PWGTP is called\n    \n  } else if (length(num_vars) &lt; 2) {\n    \n    stop(\"Must enter more than one numeric variable\") #check more than 1 numeric variable\n    \n  } else if (!all(num_vars %in% c(\"PWGTP\", \"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \n                             \"JWDP\", \"JWMNP\"))) {\n    \n    stop(\"Entered an invalid numeric variable\") #checks a valid numeric variable is called\n    \n  } else if (!all(cat_vars %in% c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \n                             \"SCHL\", \"SEX\"))) {\n    stop(\"Entered an invalid categorical variable\") #checks a valid categorical is called\n    \n  } else if (length(cat_vars) &lt; 1) {\n     \n    stop(\"Must enter at least one categorical variable\")\n    \n  } else if ((\"HISPEED\" %in% cat_vars | \"JWTRNS\" %in% cat_vars) & \n             !(year %in% c(2019, 2021))) {\n    \n    stop(\"HISPEED and JWTRNS only have data for 2019 and 2021\") #checks HISPEED and JWTRNS are not called when year is 2019 or 2021\n    \n  } else if (!all(geo_level %in% c(\"state\", \"division\", \"region\", \"all\"))) {\n    \n    stop(\"Entered an invalid geography level\") #checks a valid geography level is entered\n    \n  }  else if ((geo_level == \"state\" & !(geo_subset %in% names(state_dict))) | \n              (geo_level == \"division\" & !(geo_subset %in% names(division_dict))) |\n              (geo_level == \"region\" & !(geo_subset %in% names(region_dict)))) {\n    \n    stop(\"Entered an invalid geography subset\") #uses geo_subset dictionaries to check a valid subset value was inputted\n  \n  } else {\n    \n    geo_paste &lt;- ifelse(geo_level == \"all\", \"\",\n                        paste0(\"&for=\",geo_level,\":\",\n                        geo_subset)) #parses geo level information if inputted\n    \n    my_url &lt;- paste0(\"https://api.census.gov/data/\",\n                     year,\n                     \"/acs/acs1/pums?get=\",\n                     paste(cat_vars,collapse =\",\"),\n                     \",\",\n                     paste(num_vars,collapse =\",\"),\n                     geo_paste,\n                     \"&key=51fa8d7040e7bff1dae932352f6b998a4678a557\") #builds URL with user inputs\n    \n  }\n\n  # Use the helper function to query the API with the URL, then make a tibble\n  API_data &lt;- api_tibble(my_url)\n \n  # Using dictionaries to convert the values in the character variables\n  # Then converting those character type columns to factors\n  for (var in c(cat_vars, geo_level)) {\n    # Don't make a geo_level column if using \"all\"\n    if (var == \"all\") {\n      next\n    }\n    API_data &lt;- API_data |&gt; \n      # the !! := part allows you to use a \"string\" for a new variable name\n      # get() takes a string and gets the corresponding dictionary or column\n      mutate(!!var := as.factor(get(paste0(var, \"_dict\"))[get(var)]))\n  }\n  \n  #Using dictionaries to convert values to string that is a range of time \n  #Splits string and transforms into a time type format\n  #Finds the middle of the two times and saves it\n  for (var in num_vars[(num_vars == \"JWAP\") |\n                       (num_vars == \"JWDP\")]) {\n    API_data &lt;- API_data |&gt;\n      mutate(!!var := get(paste0(var, \"_dict\"))[get(var)]) |&gt;\n      mutate(\n        time_1 = as_hms(strptime(\n          stringr::str_split_i(\n            toupper(gsub('[.]','', get(var))), \n            \" TO \", 1), \n          format = \"%I:%M %p\")),\n        time_2 = as_hms(strptime(\n          stringr::str_split_i(\n            toupper(gsub('[.]','', get(var))),\n            \" TO \", 2),\n          format = \"%I:%M %p\")),\n        !!var :=  as_hms(time_1 + (time_2 - time_1)/2)\n        ) |&gt;\n      select(-starts_with(\"time\")) #removes variables made that are ends of the time interval \n       \n  }\n  \n  # Go through the rest of the numerical variables and replace values for NA\n  for (var in num_vars[(num_vars != \"PWGTP\") &\n                       (num_vars != \"JWAP\") &\n                       (num_vars != \"JWDP\")]) {\n    if (var == \"AGEP\") {\n      API_data &lt;- API_data |&gt;\n      # If AGEP has \"0\" or \"00\" then make it NA, otherwise keep value\n      mutate(!!var := ifelse(get(var) %in% c(\"0\", \"00\"), NA, get(var)))\n    } else if (var == \"GASP\") {\n      API_data &lt;- API_data |&gt;\n      # If GASP is one of these then make it NA, otherwise keep value\n      mutate(!!var := ifelse(get(var) %in% c(\"0\", \"1\", \"2\", \"3\", \n                                             \"001\", \"002\", \"003\"),\n                             NA, get(var)))\n    } else if (var == \"GRPIP\") {\n      API_data &lt;- API_data |&gt;\n        # If GRPIP is one of these then make it NA, otherwise keep value\n        mutate(!!var := ifelse(get(var) %in% c(\"0\", \"101\"), NA, get(var)))\n    } else if (var == \"JWMNP\") {\n      API_data &lt;- API_data |&gt;\n        # If JWMNP is \"0\" then make it NA, otherwise keep value\n        mutate(!!var := ifelse(get(var) == \"0\", NA, get(var)))\n    }\n  }\n  \n  # Converts the remaining columns to numeric\n  API_data &lt;- API_data |&gt;\n    # Across all columns that are character type, convert them to numeric\n    mutate(across(where(is.character), as.numeric))\n  \n  return(API_data)\n}\n\nLet’s test calling the API using our new function!\nAs you can see this takes the information we want very nicely and outputs all the variables in a usable format. This saves us time as there are many combinations of variables we could ask for and we don’t need to be uniquely parsing and converting our data.\n\ntest_tib &lt;- call_API(2021, \n                     c(\"PWGTP\", \"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\"),\n                     c(\"FER\", \"HHL\", \"SCH\", \"SCHL\", \"SEX\"),\n                     \"state\", \n                     \"09\")\ntest_tib\n\n# A tibble: 36,665 × 13\n   FER   HHL   SCH   SCHL  SEX   PWGTP  AGEP  GASP GRPIP JWAP  JWDP  JWMNP state\n   &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;tim&gt; &lt;tim&gt; &lt;dbl&gt; &lt;fct&gt;\n 1 N/A … N/A … Yes,… Grad… male      6    13    NA    NA    NA    NA    NA Conn…\n 2 No    N/A … Yes,… 1 or… fema…    84    20    NA    NA 10:02 09:32    30 Conn…\n 3 N/A … N/A … No, … Bach… male     14    89    NA    NA    NA    NA    NA Conn…\n 4 N/A … N/A … Yes,… 1 or… male      9    22    NA    NA    NA    NA    NA Conn…\n 5 N/A … N/A … No, … Some… male     80    48    NA    NA    NA    NA    NA Conn…\n 6 N/A … N/A … No, … No s… male      3    46    NA    NA    NA    NA    NA Conn…\n 7 N/A … N/A … No, … Bach… male     20    56    NA    NA    NA    NA    NA Conn…\n 8 No    N/A … Yes,… 1 or… fema…    46    19    NA    NA    NA    NA    NA Conn…\n 9 No    N/A … Yes,… Regu… fema…    35    18    NA    NA    NA    NA    NA Conn…\n10 N/A … N/A … No, … Regu… male    138    45    NA    NA    NA    NA    NA Conn…\n# ℹ 36,655 more rows"
  },
  {
    "objectID": "ST558_Project1.html#multiple-year-function",
    "href": "ST558_Project1.html#multiple-year-function",
    "title": "ST558 Project 1",
    "section": "Multiple Year Function",
    "text": "Multiple Year Function\nIn this section we create a function that allows the user to specify multiple years of data (using the same constraints of what can be called as above). For every year inputted, the function calls the single year function and combines the tibbles into one data set.\n\n# Calls the single year call_API function for every year passed in\ncall_API_mult_years &lt;- function(years=c(2022), num_vars = c(\"PWGTP\", \"AGEP\"), char_var = c(\"SEX\"), geo_level = \"state\", geo_subset = \"09\") {\n  first &lt;- TRUE\n  # Goes through each year in years vector\n  for (year in years) {\n    # For the first year set up the multi_year_tibble\n    if (first) {\n      multi_year_tibble &lt;- call_API(year, num_vars, char_var, \n                                    geo_level, geo_subset)\n      multi_year_tibble['Year'] &lt;- year #saves in a new column which year is pulled\n      # Set to false so we don't overwrite the multi_year_tibble with one year\n      first &lt;- FALSE\n    } else {\n      # For every additional year use the single_year_tibble\n      single_year_tibble &lt;- call_API(year, num_vars, char_var, \n                                     geo_level, geo_subset) #use single year function to call API\n      single_year_tibble['Year'] &lt;- year\n      # Adds the rows from the single_year_tibble to the multi for each year\n      multi_year_tibble &lt;- dplyr::bind_rows(multi_year_tibble,\n                                            single_year_tibble) #combine tibbles \n    }\n  }\n  return(multi_year_tibble)\n}\n\nLet’s test it!\n\nAPI_call_multi_year &lt;- call_API_mult_years(c(2016:2018),\n                                           c(\"PWGTP\", \"AGEP\",\"GASP\", \"GRPIP\", \n                                             \"JWAP\",\"JWDP\", \"JWMNP\"),\n                                           c(\"SEX\",\"FER\", \"HHL\", \"SCH\", \"SCHL\"),\n                                           \"state\",\n                                           \"09\")\n\nAPI_call_multi_year\n\n# A tibble: 107,922 × 14\n   SEX   FER   HHL   SCH   SCHL  PWGTP  AGEP  GASP GRPIP JWAP  JWDP  JWMNP state\n   &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;tim&gt; &lt;tim&gt; &lt;dbl&gt; &lt;fct&gt;\n 1 fema… No    Engl… No, … Mast…   135    50   100    NA    NA    NA    NA Conn…\n 2 male  N/A … Engl… No, … Bach…   120    50   100    NA 07:37 07:02    35 Conn…\n 3 fema… N/A … Engl… Yes,… Grad…   116    14   100    NA    NA    NA    NA Conn…\n 4 fema… N/A … Engl… No, … Bach…   110    59    NA    NA 06:57 06:32    25 Conn…\n 5 male  N/A … Engl… No, … Prof…   118    60    NA    NA    NA    NA    NA Conn…\n 6 male  N/A … Engl… No, … Bach…   132    62    40    NA    NA    NA    NA Conn…\n 7 fema… N/A … Span… No, … 1 or…    84    62    NA    NA    NA    NA    NA Conn…\n 8 male  N/A … Span… No, … Regu…    80    29    NA    NA    NA    NA    NA Conn…\n 9 male  N/A … Engl… No, … Prof…   120    62    NA    NA    NA    NA    NA Conn…\n10 male  N/A … Engl… No, … 1 or…   113    56   200    NA 06:22 06:02    20 Conn…\n# ℹ 107,912 more rows\n# ℹ 1 more variable: Year &lt;int&gt;"
  },
  {
    "objectID": "ST558_Project1.html#summary-function",
    "href": "ST558_Project1.html#summary-function",
    "title": "ST558 Project 1",
    "section": "Summary Function",
    "text": "Summary Function\nNow that we have the ability to pull data and in a nice clean format, we can write our own custom summary function for a tibble that has a class of “census”. This allows us to call the summary() function on our API call tibbles. The default is to give a summary for all numerical and categorical variables, but the user can also specify what they want to see. For numerical variables we find the sample mean and sample standard deviation. For the time variables we do this by converting them to seconds (from the start of the day). The categorical variables are counted up for each value the variable can take on, like how many “Males” or “Females” are there. The summaries are returned as a named list.\n\n# Produces means and std devs for numeric variables\n# and counts for categorical variables. \nsummary.census &lt;- function(data, \n                           num_var_vec = c(\"all\"), \n                           cat_var_vec = c(\"all\")) {\n  # By default, summarizes all numeric and categorical variables (other than PWGTP)\n  # User can also specify the variables they'd like to summarize\n  summary_list &lt;- list()\n  # Checks to make sure the variables are valid\n  if (!all(num_var_vec %in% c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \n                              \"JWDP\", \"JWMNP\", \"all\"))) {\n    \n    stop(\"Entered an invalid numeric variable to summarize\")\n    \n  } else if (!all(cat_var_vec %in% c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \n                                     \"SCHL\", \"SEX\", \"all\"))) {\n    \n    stop(\"Entered an invalid character variable to summarize\")\n  }\n  \n  if (num_var_vec[1] == \"all\") {\n    # All possible numeric variables, not including PWGTP\n    num_var_vec &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\")\n  }\n  if (cat_var_vec[1] == \"all\") {\n    # All possible categorical variables\n    cat_var_vec &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")\n  }\n  \n  for (var in num_var_vec) {\n    # Check that the numeric variable is actually in the tibble\n    if (var %in% names(data)) {\n      # Convert the time variables to numeric\n      # This will represent seconds (from the start of the day)\n      if (var == \"JWAP\" | var == \"JWDP\") {\n        data[[var]] &lt;- as.numeric(data[[var]])\n      } \n      # Calculate the sample mean for the numeric variables\n      summary_list[paste0(var,\"_mean\")] &lt;- \n        sum(data[,var] * data$PWGTP, na.rm = TRUE) / sum(data$PWGTP)\n      \n      # Calculate the sample standard deviation for the numeric variables\n      sd_mean &lt;- summary_list[[paste0(var,\"_mean\")]]\n      summary_list[paste0(var, \"_sd\")] &lt;- \n        sqrt(sum(data$PWGTP*(data[,var] - sd_mean)^2, na.rm=TRUE)/ \n               (sum(data$PWGTP) - 1))\n        \n    }\n  }\n  \n  # Counting the categorical variables\n  for (var in cat_var_vec) {\n    # Check that the categorical variable is actually in the tibble\n    if (var %in% names(data)) {\n      summary_list[[paste0(var,\"_count\")]] &lt;- data |&gt; \n        # Groups by the values the variable can take on\n        group_by(data[,var]) |&gt;\n        # Counts the total number of entries for that value using PWGTP\n        summarise(count = sum(PWGTP))\n    }\n  }\n  \n  # return the values as a named list\n  return(summary_list)\n}\n\nTime to test the summary function on both the multi year API call and the single year API call functions.\n\n# Defaults to all for both numerical and categorical variables\nsummary(API_call_multi_year)\n\n$AGEP_mean\n[1] 40.34435\n\n$AGEP_sd\n[1] 22.92107\n\n$GASP_mean\n[1] 55.98554\n\n$GASP_sd\n[1] 84.13068\n\n$GRPIP_mean\n[1] 8.660237\n\n$GRPIP_sd\n[1] 16.27754\n\n$JWAP_mean\n[1] 15125.61\n\n$JWAP_sd\n[1] 14285.64\n\n$JWDP_mean\n[1] 14414.98\n\n$JWDP_sd\n[1] 13924.19\n\n$JWMNP_mean\n[1] 12.52514\n\n$JWMNP_sd\n[1] 18.54847\n\n$FER_count\n# A tibble: 3 × 2\n  FER                                                    count\n  &lt;fct&gt;                                                  &lt;dbl&gt;\n1 N/A (less than 15 years/greater than 50 years/ male) 8261803\n2 No                                                   2372813\n3 Yes                                                   102685\n\n$HHL_count\n# A tibble: 6 × 2\n  HHL                                  count\n  &lt;fct&gt;                                &lt;dbl&gt;\n1 Asian and Pacific Island languages  317910\n2 English Only                       7361643\n3 N/A (GQ/vacant)                     342738\n4 Other Indo-European languages       966558\n5 Other Language                      166071\n6 Spanish                            1582381\n\n$SCH_count\n# A tibble: 4 × 2\n  SCH                                             count\n  &lt;fct&gt;                                           &lt;dbl&gt;\n1 N/A (less than 3 years old)                    315438\n2 No, has not attended in the last 3 months     7728003\n3 Yes, private school or college or home school  540223\n4 Yes, public school or public college          2153637\n\n$SCHL_count\n# A tibble: 25 × 2\n   SCHL                                           count\n   &lt;fct&gt;                                          &lt;dbl&gt;\n 1 1 or more years of college credit, no degree 1172648\n 2 12th grade - no diploma                       132773\n 3 Associate's degree                            630808\n 4 Bachelor's degree                            1777982\n 5 Doctorate degree                              124094\n 6 GED or alternative credential                 252662\n 7 Grade 1                                       118830\n 8 Grade 10                                      254177\n 9 Grade 11                                      274884\n10 Grade 2                                       126238\n# ℹ 15 more rows\n\n$SEX_count\n# A tibble: 2 × 2\n  SEX      count\n  &lt;fct&gt;    &lt;dbl&gt;\n1 female 5500442\n2 male   5236859\n\n\n\n# It also works with just the single year API call function\nsummary(test_tib, c(\"AGEP\"), c(\"FER\"))\n\n$AGEP_mean\n[1] 40.83644\n\n$AGEP_sd\n[1] 22.97587\n\n$FER_count\n# A tibble: 3 × 2\n  FER                                                    count\n  &lt;fct&gt;                                                  &lt;dbl&gt;\n1 N/A (less than 15 years/greater than 50 years/ male) 2790478\n2 No                                                    776181\n3 Yes                                                    38938"
  },
  {
    "objectID": "ST558_Project1.html#plot-function",
    "href": "ST558_Project1.html#plot-function",
    "title": "ST558 Project 1",
    "section": "Plot Function",
    "text": "Plot Function\nFinally, lets create our own custom plot function so we can visualize the data. Code for creating a plot for a census class tibble with ggplot. Requires the user to specify one categorical variable and one numeric variable for plotting purposes. The PWGTP variable accounts for the weights when making the plots.\n\n# Assumes that column names will be passed as strings. \nplot.census &lt;- function(data, cat_var, num_var) {\n  ggplot(data, \n         aes(x = get(cat_var), y = get(num_var), weight = PWGTP)) +\n  geom_boxplot(na.rm = TRUE) +\n    labs(title = paste(num_var, \"Boxplots Grouped By\", cat_var, sep=\" \"),\n         x = cat_var, y = num_var)\n}\n\nLet’s make some plots!\n\n# Plotting the Travel Time to Work by Household Language\nplot(API_call_multi_year, \"HHL\", \"JWMNP\")"
  },
  {
    "objectID": "ST558_Project1.html#pums-census-api-data-north-carolina-exploration",
    "href": "ST558_Project1.html#pums-census-api-data-north-carolina-exploration",
    "title": "ST558 Project 1",
    "section": "PUMS Census API Data North Carolina Exploration",
    "text": "PUMS Census API Data North Carolina Exploration\nSomething we found interesting while working with this data is that the PUMS API appears to not have any data from 2020. It seems the data for that year was dropped due to Covid. So, we decided to explore if there was a difference in some of the data from 2019 to 2021, particularly for North Carolina.\nWe started by using our call_API_mult_years function to get data for all of the numerical and categorical variables for 2019 and 2021 from North Carolina.\n\n# Looking at all variables from 2019 and 2021 for the state of NC\nNC_Census &lt;- call_API_mult_years(c(2019, 2021),\n                                 c(\"PWGTP\", \"AGEP\",\"GASP\", \"GRPIP\", \"JWAP\",\n                                   \"JWDP\", \"JWMNP\"),\n                                 c(\"SEX\",\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\",\n                                   \"SCH\", \"SCHL\"),\n                                 \"state\",\n                                 \"37\")\n\nNC_Census\n\n# A tibble: 207,853 × 16\n   SEX    FER     HHL   HISPEED JWTRNS SCH   SCHL  PWGTP  AGEP  GASP GRPIP JWAP \n   &lt;fct&gt;  &lt;fct&gt;   &lt;fct&gt; &lt;fct&gt;   &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;tim&gt;\n 1 male   N/A (l… N/A … N/A (G… N/A (… No, … Grad…    70    52    NA    NA    NA\n 2 male   N/A (l… N/A … N/A (G… N/A (… No, … Regu…    70    50    NA    NA    NA\n 3 male   N/A (l… N/A … N/A (G… N/A (… No, … Regu…    16    28    NA    NA    NA\n 4 male   N/A (l… N/A … N/A (G… N/A (… No, … Grad…    80    49    NA    NA    NA\n 5 male   N/A (l… N/A … N/A (G… N/A (… Yes,… No s…     7     3    NA    NA    NA\n 6 male   N/A (l… N/A … N/A (G… N/A (… No, … 1 or…    52    30    NA    NA    NA\n 7 male   N/A (l… N/A … N/A (G… N/A (… No, … Grad…    82    67    NA    NA    NA\n 8 male   N/A (l… N/A … N/A (G… N/A (… Yes,… 1 or…    31    19    NA    NA    NA\n 9 female No      N/A … N/A (G… N/A (… Yes,… 1 or…    72    22    NA    NA    NA\n10 female N/A (l… N/A … N/A (G… N/A (… No, … Asso…    62    67    NA    NA    NA\n# ℹ 207,843 more rows\n# ℹ 4 more variables: JWDP &lt;time&gt;, JWMNP &lt;dbl&gt;, state &lt;fct&gt;, Year &lt;dbl&gt;\n\n\nAs morbid as it may sound, lets compare the age (AGEP) distributions between 2019 and 2021, grouped by SEX. Did Covid have any impact on the average age in this census for North Carolina?\n\n# Plotting AGEP boxplots grouped by SEX for 2019\nplot(NC_Census[NC_Census$Year == 2019,], \"SEX\", \"AGEP\")\n\n\n\n\n\n\n\n\n\n# Plotting AGEP boxplots grouped by SEX for 2021\nplot(NC_Census[NC_Census$Year == 2021,], \"SEX\", \"AGEP\")\n\n\n\n\n\n\n\n\nThey seem to be fairly similar, so either deaths from Covid were across age groups, or the census didn’t capture an effect.\nNext we can look at high speed internet (HISPEED) ownership against the gross rent as a percent of household income for the past 12 months (GRPIP). Someone with a lower GRPIP is more likely to be well off, though you could argue that more well off people just end up renting more expensive apartments. Regardless, the main conjecture is that perhaps staying in from Covid led to more people getting high speed internet.\n\n# Plotting GRPIP boxplots grouped by HISPEED for 2019\nplot(NC_Census[NC_Census$Year == 2019,], \"HISPEED\", \"GRPIP\")\n\n\n\n\n\n\n\n\n\n# Plotting GRPIP boxplots grouped by HISPEED for 2021\nplot(NC_Census[NC_Census$Year == 2021,], \"HISPEED\", \"GRPIP\")\n\n\n\n\n\n\n\n\nIt looks like the GRPIP for the yes to high speed internet group actually did increase slightly. Possibly indicating that even less well off people were still willing to get high speed internet during Covid.\nLet’s look at the summary statistics.\n\n# Getting the mean and sd of GRPIP and the counts for HISPEED from 2019\nsummary(NC_Census[NC_Census$Year == 2019,], c(\"GRPIP\"), c(\"HISPEED\"))\n\n$GRPIP_mean\n[1] 8.243827\n\n$GRPIP_sd\n[1] 14.98277\n\n$HISPEED_count\n# A tibble: 3 × 2\n  HISPEED                                          count\n  &lt;fct&gt;                                            &lt;dbl&gt;\n1 N/A (GQ/vacant/no paid access to the internet) 1425995\n2 No                                             1442239\n3 Yes                                            7619850\n\n\n\n# Getting the mean and sd of GRPIP and the counts for HISPEED from 2021\nsummary(NC_Census[NC_Census$Year == 2021,], c(\"GRPIP\"), c(\"HISPEED\"))\n\n$GRPIP_mean\n[1] 7.695744\n\n$GRPIP_sd\n[1] 15.04766\n\n$HISPEED_count\n# A tibble: 3 × 2\n  HISPEED                                          count\n  &lt;fct&gt;                                            &lt;dbl&gt;\n1 N/A (GQ/vacant/no paid access to the internet) 1071390\n2 No                                             1267787\n3 Yes                                            8211985\n\n\nWe can see that the number of people with no internet or no high speed internet decreased from 2019 to 2021, and the number with high speed internet increased. This supports our general conjecture, though it could also be a natural increase over time unrelated to Covid. The mean GRPIP went down, which means that either people were making more income by 2021, or rent prices had gone down.\nThis demonstrates the kind of quick analysis you could perform on data from an API using our functions to query the API, summarize the data, and plot it."
  }
]